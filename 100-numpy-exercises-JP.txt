☆100 Numpy 演習( https://github.com/rougier/numpy-100/blob/master/100_Numpy_exercises.md ）

これは numpy メーリング・リスト、stack overflow、numpy のドキュメントから集められた演習問題のコレクションである。このコレクションの目標は、新しいユーザと古いユーザにクイック・リファレンスを提供することだが、教える人達に一連の演習を提供することでもある。

間違いを見つけたりベターな解法を考えたら、気軽に https://github.com/rougier/numpy-100 でイシューを開いて欲しい。

１．np という名前で numpy パッケージをインポートする(★☆☆)
import numpy as np

２．numpy のバージョンと設定を表示する(★☆☆)
print(np.__version__)
np.show_config()

３．サイズが 10 の null ベクトルを作る(★☆☆)
Z = np.zeros(10)
print(Z)

４．配列のメモリ・サイズを見つける方法は？(★☆☆)
Z = np.zeros((10,10))
print("%d bytes" % (Z.size * Z.itemsize))

５．numpy の add 関数のドキュメントをコマンド・ラインから得る方法は？(★☆☆)
%run `python -c "import numpy; numpy.info(numpy.add)"`

６．サイズが 10 の null ベクトルで５番目の値が 1 のものを作る(★☆☆)
Z = np.zeros(10)
Z[4] = 1
print(Z)

７．値の範囲が 10 から 49 のベクトルを作る(★☆☆)
Z = np.arange(10,50)
print(Z)

８．ベクトルを反転させる(最初の要素が最後になる)(★☆☆)
Z = np.arange(50)
Z = Z[::-1]

９．値の範囲が 0 から 8 の 3x3 行列を作る(★☆☆)
Z = np.arange(9).reshape(3,3)
print(Z)

10．[1,2,0,0,4,0] から非ゼロの要素のインデックスを見つける(★☆☆)
nz = np.nonzero([1,2,0,0,4,0])
print(nz)

11．3x3 の単位行列を作る(★☆☆)
Z = np.eye(3)
print(Z)

12．ランダムな値で 3x3x3 の配列を作る(★☆☆)
Z = np.random.random((3,3,3))
print(Z)

13．ランダムな値で 10x10 の配列を作って、最小と最大の値を見つける(★☆☆)
Z = np.random.random((10,10))
Zmin, Zmax = Z.min(), Z.max()
print(Zmin, Zmax)

14．サイズが 30 のランダムなベクトルを作って平均値を見つける(★☆☆)
Z = np.random.random(30)
m = Z.mean()
print(m)

15．境界が 1 で内部が 0 の２次元配列を作る(★☆☆)
Z = np.ones((10,10))
Z[1:-1,1:-1] = 0

16．既存の配列に( 0 で満たされた)境界を加える方法は？(★☆☆)
Z = np.ones((5,5))
Z = np.pad(Z, pad_width=1, mode='constant', constant_values=0)
print(Z)

17. 次の式の結果は何か？(★☆☆)
print(0 * np.nan)
print(np.nan == np.nan)
print(np.inf > np.nan)
print(np.nan - np.nan)
print(0.3 == 3 * 0.1)

18. 対角線のすぐ下が 1、2、3、4 の値の 5x5 行列を作る(★☆☆)
Z = np.diag(1+np.arange(4),k=-1)
print(Z)

19．8x8 の行列を作って市松模様で満たす(★☆☆)
Z = np.zeros((8,8),dtype=int)
Z[1::2,::2] = 1
Z[::2,1::2] = 1
print(Z)

20．(6,7,8) の形状の配列を考え、100 番目の要素のインデックス (x,y,z) は何か？(※難易度未設定)
print(np.unravel_index(100,(6,7,8)))

21．tile 関数を使って市松模様の 8x8 の行列を作る(★☆☆)
Z = np.tile( np.array([[0,1],[1,0]]), (4,4))
print(Z)

22．5x5 のランダムな行列を正規化する(★☆☆)
Z = np.random.random((5,5))
Zmax, Zmin = Z.max(), Z.min()
Z = (Z - Zmin)/(Zmax - Zmin)
print(Z)

23．４つの符号なしバイト( RGBA )で色を表したカスタムな dtype を作る(★☆☆)
color = np.dtype([("r", np.ubyte, 1),
                  ("g", np.ubyte, 1),
                  ("b", np.ubyte, 1),
                  ("a", np.ubyte, 1)])

24．5x3 行列と 3x2 行列をかける(実行列の積)(★☆☆)
Z = np.dot(np.ones((5,3)), np.ones((3,2)))
print(Z)

# Alternative solution, in Python 3.5 and above
Z = np.ones((5,3)) @ np.ones((3,2))
print(Z)

25．与えられた一次元配列で、3 から 8 の場所の全ての要素を否定する(★☆☆)
# Author: Evgeni Burovski

Z = np.arange(11)
Z[(3 < Z) & (Z <= 8)] *= -1

26．次のスクリプトの出力は何か？(★☆☆)
# Author: Jake VanderPlas

print(sum(range(5),-1))
from numpy import *
print(sum(range(5),-1))

27．整数ベクトル Z を考えるとき、これらの式は適切か？(★☆☆)
Z**Z
2 << Z >> 2
Z <- Z
1j*Z
Z/1/1
Z<Z>Z

28．次の式の結果は何か？(※難易度未設定)
print(np.array(0) / np.array(0))
print(np.array(0) // np.array(0))
print(np.array([np.nan]).astype(int).astype(float))

29．浮動小数点型配列をゼロから丸める方法は？(★☆☆)
# Author: Charles R Harris

Z = np.random.uniform(-10,+10,10)
print (np.copysign(np.ceil(np.abs(Z)), Z))

30. ２つの配列に共通な値を見つける方法は？(★☆☆)
Z1 = np.random.randint(0,10,10)
Z2 = np.random.randint(0,10,10)
print(np.intersect1d(Z1,Z2))

31. 全ての numpy の警告を無視する方法は？(非推奨)(★★☆)
# Suicide mode on
defaults = np.seterr(all="ignore")
Z = np.ones(1) / 0

# Back to sanity
_ = np.seterr(**defaults)

コンテキスト・マネージャーを使った同等の方法
with np.errstate(divide='ignore'):
    Z = np.ones(1) / 0

32. 次の式は真か？(★☆☆)
np.sqrt(-1) == np.emath.sqrt(-1)

33. 昨日、今日、明日の日付を得る方法は？(★★☆)
yesterday = np.datetime64('today', 'D') - np.timedelta64(1, 'D')
today     = np.datetime64('today', 'D')
tomorrow  = np.datetime64('today', 'D') + np.timedelta64(1, 'D')

34. 2016 年 7 月に対応する全ての日付を得る方法は？(★★☆)
Z = np.arange('2016-07', '2016-08', dtype='datetime64[D]')
print(Z)

35. (コピーを使わずに)その場で ((A+B)*(-A/2)) を計算する方法は？(★★☆)
A = np.ones(3)*1
B = np.ones(3)*2
C = np.ones(3)*3
np.add(A,B,out=B)
np.divide(A,2,out=A)
np.negative(A,out=A)
np.multiply(A,B,out=A)

36．５つの異なる方法を使ってランダムな配列の整数部分を抜き出す(★★☆)
Z = np.random.uniform(0,10,10)

print (Z - Z%1)
print (np.floor(Z))
print (np.ceil(Z)-1)
print (Z.astype(int))
print (np.trunc(Z))

37．行の値が 0 から 4 の範囲の 5x5 行列を作る(★★☆)
Z = np.zeros((5,5))
Z += np.arange(5)
print(Z)

38．10 個の整数を生成してそれを配列の構成に使う生成関数を考える(★☆☆)
def generate():
    for x in range(10):
        yield x
Z = np.fromiter(generate(),dtype=float,count=-1)
print(Z)

39．値の範囲が 0 から 1 で 0 と 1 を含まないサイズが 10 のベクトルを作る(★★☆)
Z = np.linspace(0,1,11,endpoint=False)[1:]
print(Z)

40．サイズが 10 のランダムなベクトルを作ってソートする(★★☆)
Z = np.random.random(10)
Z.sort()
print(Z)

41．np.sum より早く小さな配列を合計する方法は？(★★☆)
# Author: Evgeni Burovski

Z = np.arange(10)
np.add.reduce(Z)

42．２つのランダムな配列 A と B を考え、それらが等しいかどうかチェックする(★★☆)
A = np.random.randint(0,2,5)
B = np.random.randint(0,2,5)

# Assuming identical shape of the arrays and a tolerance for the comparison of values
equal = np.allclose(A,B)
print(equal)

# Checking both the shape and the element values, no tolerance (values have to be exactly equal)
equal = np.array_equal(A,B)
print(equal)

43．イミュータブルな(読み出し専用の)配列を作る(★★☆)
Z = np.zeros(10)
Z.flags.writeable = False
Z[0] = 1

44．直交座標を表すランダムな 10 x 2 の行列を考え、極座標に変換する(★★☆)
Z = np.random.random((10,2))
X,Y = Z[:,0], Z[:,1]
R = np.sqrt(X**2+Y**2)
T = np.arctan2(Y,X)
print(R)
print(T)

45．サイズが 10 のランダムなベクトルを作って、最大値を 0 に置き換える(★★☆)
Z = np.random.random(10)
Z[Z.argmax()] = 0
print(Z)

46．[0,1]x[0,1] の領域を占める xy 座標系の構造体配列を作る(★★☆)
Z = np.zeros((5,5), [('x',float),('y',float)])
Z['x'], Z['y'] = np.meshgrid(np.linspace(0,1,5),
                             np.linspace(0,1,5))
print(Z)

47．X と Y という２つの配列が与えられ、Cauchy 行列 C (Cij = 1/(xi - yj))を構成する(※難易度未設定)
# Author: Evgeni Burovski

X = np.arange(8)
Y = X + 0.5
C = 1.0 / np.subtract.outer(X, Y)
print(np.linalg.det(C))

48．それぞれの numpy のスカラ型で表せる、最大値と最小値を表示する(★★☆)
for dtype in [np.int8, np.int32, np.int64]:
   print(np.iinfo(dtype).min)
   print(np.iinfo(dtype).max)
for dtype in [np.float32, np.float64]:
   print(np.finfo(dtype).min)
   print(np.finfo(dtype).max)
   print(np.finfo(dtype).eps)

49．配列の全ての要素を表示する方法は？(★★☆)
np.set_printoptions(threshold=np.nan)
Z = np.zeros((16,16))
print(Z)

50．配列内で(与えられたスカラーに)最も近い値を見つける方法は？(★★☆)
Z = np.arange(100)
v = np.random.uniform(0,100)
index = (np.abs(Z-v)).argmin()
print(Z[index])

