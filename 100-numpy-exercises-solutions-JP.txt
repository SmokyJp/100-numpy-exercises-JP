2.
>>> print(np.__version__)
1.14.5

numpy.__version__
numpy のバージョン番号を取得

>>> np.show_config()
blas_mkl_info:
  NOT AVAILABLE
blis_info:
  NOT AVAILABLE
openblas_info:
    library_dirs = ['C:\\projects\\numpy-wheels-jc1cl\\numpy\\build\\openblas']
    libraries = ['openblas']
    language = f77
    define_macros = [('HAVE_CBLAS', None)]
blas_opt_info:
    library_dirs = ['C:\\projects\\numpy-wheels-jc1cl\\numpy\\build\\openblas']
    libraries = ['openblas']
    language = f77
    define_macros = [('HAVE_CBLAS', None)]
lapack_mkl_info:
  NOT AVAILABLE
openblas_lapack_info:
    library_dirs = ['C:\\projects\\numpy-wheels-jc1cl\\numpy\\build\\openblas']
    libraries = ['openblas']
    language = f77
    define_macros = [('HAVE_CBLAS', None)]
lapack_opt_info:
    library_dirs = ['C:\\projects\\numpy-wheels-jc1cl\\numpy\\build\\openblas']
    libraries = ['openblas']
    language = f77
    define_macros = [('HAVE_CBLAS', None)]
>>>

numpy.show_config()
使用している行列ライブラリを確認

3.
>>> Z = np.zeros(10)
>>> print(Z)
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]

numpy.zeros()
すべての要素が 0 の配列を生成する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html

4.
>>> Z = np.zeros((10,10))
>>> print("%d bytes" % (Z.size * Z.itemsize))
800 bytes

numpy.ndarray.size
配列内の要素の数

numpy.ndarray.itemsize
配列の１要素のバイト長

5.
add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])

Add arguments element-wise.

Parameters
----------
x1, x2 : array_like
    The arrays to be added.  If ``x1.shape != x2.shape``, they must be
    broadcastable to a common shape (which may be the shape of one or
    the other).
out : ndarray, None, or tuple of ndarray and None, optional
    A location into which the result is stored. If provided, it must have
    a shape that the inputs broadcast to. If not provided or `None`,
    a freshly-allocated array is returned. A tuple (possible only as a
    keyword argument) must have length equal to the number of outputs.
where : array_like, optional
    Values of True indicate to calculate the ufunc at that position, values
    of False indicate to leave the value in the output alone.
**kwargs
    For other keyword-only arguments, see the
    :ref:`ufunc docs <ufuncs.kwargs>`.

Returns
-------
add : ndarray or scalar
    The sum of `x1` and `x2`, element-wise.  Returns a scalar if
    both  `x1` and `x2` are scalars.

Notes
-----
Equivalent to `x1` + `x2` in terms of array broadcasting.

Examples
--------
>>> np.add(1.0, 4.0)
5.0
>>> x1 = np.arange(9.0).reshape((3, 3))
>>> x2 = np.arange(3.0)
>>> np.add(x1, x2)
array([[  0.,   2.,   4.],
       [  3.,   5.,   7.],
       [  6.,   8.,  10.]])

6.
>>> Z = np.zeros(10)
>>> Z[4] = 1
>>> print(Z)
[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]

7.
>>> Z = np.arange(10,50)
>>> print(Z)
[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]

numpy.arange()
与えられた間隔で等間隔の値を返す
https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html

9.
>>> Z = np.arange(9).reshape(3,3)
>>> print(Z)
[[0 1 2]
 [3 4 5]
 [6 7 8]]

numpy.ndarray.reshape()
ndarray 配列の形状を変更する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.reshape.html

10.
>>> nz = np.nonzero([1,2,0,0,4,0])
>>> print(nz)
(array([0, 1, 4], dtype=int64),)

numpy.nonzero()
非ゼロ要素のあるインデックスを各軸ごとに１次元配列にして返す

11.
>>> Z = np.eye(3)
>>> print(Z)
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]

numpy.eye()
単位行列を生成する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.eye.html

12.
>>> Z = np.random.random((3,3,3))
>>> print(Z)
[[[0.71082579 0.73571559 0.7776125 ]
  [0.59539291 0.58251999 0.0935578 ]
  [0.01053763 0.47575071 0.41812704]]

 [[0.20696107 0.41316095 0.70655963]
  [0.33625779 0.21294934 0.18813152]
  [0.67080029 0.15956399 0.77085771]]

 [[0.4612008  0.06095904 0.12876502]
  [0.74507861 0.19707868 0.60894546]
  [0.76347759 0.37706817 0.69185455]]]

numpy.random.random()
乱数を生成する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.random.html

13.
>>> Z = np.random.random((10,10))
>>> Zmin, Zmax = Z.min(), Z.max()
>>> print(Zmin, Zmax)
0.008234079802933891 0.9652612782201241

numpy.min()
最小値を求める

numpy.max()
最大値を求める

14.
>>> Z = np.random.random(30)
>>> m = Z.mean()
>>> print(m)
0.4540177272226375

numpy.mean()
平均値を求める

15.
numpy.ones()
全ての要素が 1 の行列を生成する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html

16.
>>> Z = np.ones((10,10))
>>> Z[1:-1,1:-1] = 0
>>> Z = np.ones((5,5))
>>> Z = np.pad(Z, pad_width=1, mode='constant', constant_values=0)
>>> print(Z)
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 1. 1. 1. 1. 1. 0.]
 [0. 1. 1. 1. 1. 1. 0.]
 [0. 1. 1. 1. 1. 1. 0.]
 [0. 1. 1. 1. 1. 1. 0.]
 [0. 1. 1. 1. 1. 1. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]

numpy.pad()
値を詰め込む
https://docs.scipy.org/doc/numpy/reference/generated/numpy.pad.html

17.
>>> print(0 * np.nan)
nan
>>> print(np.nan == np.nan)
False
>>> print(np.inf > np.nan)
False
>>> print(np.nan - np.nan)
nan
>>> print(0.3 == 3 * 0.1)
False

numpy.nan
欠損値

numpy.inf
無限大

18.
>>> Z = np.diag(1+np.arange(4),k=-1)
>>> print(Z)
[[0 0 0 0 0]
 [1 0 0 0 0]
 [0 2 0 0 0]
 [0 0 3 0 0]
 [0 0 0 4 0]]

numpy.diag()
配列の対角成分を取り出す
https://docs.scipy.org/doc/numpy/reference/generated/numpy.diag.html

numpy.arrange()
連番や等差数列を生成する

19.
>>> Z = np.zeros((8,8),dtype=int)
>>> Z[1::2,::2] = 1
>>> Z[::2,1::2] = 1
>>> print(Z)
[[0 1 0 1 0 1 0 1]
 [1 0 1 0 1 0 1 0]
 [0 1 0 1 0 1 0 1]
 [1 0 1 0 1 0 1 0]
 [0 1 0 1 0 1 0 1]
 [1 0 1 0 1 0 1 0]
 [0 1 0 1 0 1 0 1]
 [1 0 1 0 1 0 1 0]]


20.
>>> print(np.unravel_index(100,(6,7,8)))
(1, 5, 4)

numpy.unravel_index()
一次元に変換したときの位置と行列の次元から、その行列の位置を計算する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.unravel_index.html
