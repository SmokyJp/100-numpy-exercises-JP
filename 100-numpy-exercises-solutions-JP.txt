2.
>>> print(np.__version__)
1.14.5

numpy.__version__
numpy のバージョン番号を取得

>>> np.show_config()
blas_mkl_info:
  NOT AVAILABLE
blis_info:
  NOT AVAILABLE
openblas_info:
    library_dirs = ['C:\\projects\\numpy-wheels-jc1cl\\numpy\\build\\openblas']
    libraries = ['openblas']
    language = f77
    define_macros = [('HAVE_CBLAS', None)]
blas_opt_info:
    library_dirs = ['C:\\projects\\numpy-wheels-jc1cl\\numpy\\build\\openblas']
    libraries = ['openblas']
    language = f77
    define_macros = [('HAVE_CBLAS', None)]
lapack_mkl_info:
  NOT AVAILABLE
openblas_lapack_info:
    library_dirs = ['C:\\projects\\numpy-wheels-jc1cl\\numpy\\build\\openblas']
    libraries = ['openblas']
    language = f77
    define_macros = [('HAVE_CBLAS', None)]
lapack_opt_info:
    library_dirs = ['C:\\projects\\numpy-wheels-jc1cl\\numpy\\build\\openblas']
    libraries = ['openblas']
    language = f77
    define_macros = [('HAVE_CBLAS', None)]
>>>

numpy.show_config()
使用している行列ライブラリを確認

3.
>>> Z = np.zeros(10)
>>> print(Z)
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]

numpy.zeros()
すべての要素が 0 の配列を生成する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.zeros.html

4.
>>> Z = np.zeros((10,10))
>>> print("%d bytes" % (Z.size * Z.itemsize))
800 bytes

numpy.ndarray.size
配列内の要素の数

numpy.ndarray.itemsize
配列の１要素のバイト長

5.
add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])

Add arguments element-wise.

Parameters
----------
x1, x2 : array_like
    The arrays to be added.  If ``x1.shape != x2.shape``, they must be
    broadcastable to a common shape (which may be the shape of one or
    the other).
out : ndarray, None, or tuple of ndarray and None, optional
    A location into which the result is stored. If provided, it must have
    a shape that the inputs broadcast to. If not provided or `None`,
    a freshly-allocated array is returned. A tuple (possible only as a
    keyword argument) must have length equal to the number of outputs.
where : array_like, optional
    Values of True indicate to calculate the ufunc at that position, values
    of False indicate to leave the value in the output alone.
**kwargs
    For other keyword-only arguments, see the
    :ref:`ufunc docs <ufuncs.kwargs>`.

Returns
-------
add : ndarray or scalar
    The sum of `x1` and `x2`, element-wise.  Returns a scalar if
    both  `x1` and `x2` are scalars.

Notes
-----
Equivalent to `x1` + `x2` in terms of array broadcasting.

Examples
--------
>>> np.add(1.0, 4.0)
5.0
>>> x1 = np.arange(9.0).reshape((3, 3))
>>> x2 = np.arange(3.0)
>>> np.add(x1, x2)
array([[  0.,   2.,   4.],
       [  3.,   5.,   7.],
       [  6.,   8.,  10.]])

6.
>>> Z = np.zeros(10)
>>> Z[4] = 1
>>> print(Z)
[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]

7.
>>> Z = np.arange(10,50)
>>> print(Z)
[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]

numpy.arange()
与えられた間隔で等間隔の値を返す
https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html

9.
>>> Z = np.arange(9).reshape(3,3)
>>> print(Z)
[[0 1 2]
 [3 4 5]
 [6 7 8]]

numpy.ndarray.reshape()
ndarray 配列の形状を変更する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.reshape.html

10.
>>> nz = np.nonzero([1,2,0,0,4,0])
>>> print(nz)
(array([0, 1, 4], dtype=int64),)

numpy.nonzero()
非ゼロ要素のあるインデックスを各軸ごとに１次元配列にして返す

11.
>>> Z = np.eye(3)
>>> print(Z)
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]

numpy.eye()
単位行列を生成する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.eye.html

12.
>>> Z = np.random.random((3,3,3))
>>> print(Z)
[[[0.71082579 0.73571559 0.7776125 ]
  [0.59539291 0.58251999 0.0935578 ]
  [0.01053763 0.47575071 0.41812704]]

 [[0.20696107 0.41316095 0.70655963]
  [0.33625779 0.21294934 0.18813152]
  [0.67080029 0.15956399 0.77085771]]

 [[0.4612008  0.06095904 0.12876502]
  [0.74507861 0.19707868 0.60894546]
  [0.76347759 0.37706817 0.69185455]]]

numpy.random.random()
乱数を生成する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.random.html

13.
>>> Z = np.random.random((10,10))
>>> Zmin, Zmax = Z.min(), Z.max()
>>> print(Zmin, Zmax)
0.008234079802933891 0.9652612782201241

numpy.min()
最小値を求める

numpy.max()
最大値を求める

14.
>>> Z = np.random.random(30)
>>> m = Z.mean()
>>> print(m)
0.4540177272226375

numpy.mean()
平均値を求める

15.
numpy.ones()
全ての要素が 1 の行列を生成する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.ones.html

16.
>>> Z = np.ones((10,10))
>>> Z[1:-1,1:-1] = 0
>>> Z = np.ones((5,5))
>>> Z = np.pad(Z, pad_width=1, mode='constant', constant_values=0)
>>> print(Z)
[[0. 0. 0. 0. 0. 0. 0.]
 [0. 1. 1. 1. 1. 1. 0.]
 [0. 1. 1. 1. 1. 1. 0.]
 [0. 1. 1. 1. 1. 1. 0.]
 [0. 1. 1. 1. 1. 1. 0.]
 [0. 1. 1. 1. 1. 1. 0.]
 [0. 0. 0. 0. 0. 0. 0.]]

numpy.pad()
値を詰め込む
https://docs.scipy.org/doc/numpy/reference/generated/numpy.pad.html

17.
>>> print(0 * np.nan)
nan
>>> print(np.nan == np.nan)
False
>>> print(np.inf > np.nan)
False
>>> print(np.nan - np.nan)
nan
>>> print(0.3 == 3 * 0.1)
False

numpy.nan
欠損値

numpy.inf
無限大

18.
>>> Z = np.diag(1+np.arange(4),k=-1)
>>> print(Z)
[[0 0 0 0 0]
 [1 0 0 0 0]
 [0 2 0 0 0]
 [0 0 3 0 0]
 [0 0 0 4 0]]

numpy.diag()
配列の対角成分を取り出す
https://docs.scipy.org/doc/numpy/reference/generated/numpy.diag.html

numpy.arrange()
連番や等差数列を生成する

19.
>>> Z = np.zeros((8,8),dtype=int)
>>> Z[1::2,::2] = 1
>>> Z[::2,1::2] = 1
>>> print(Z)
[[0 1 0 1 0 1 0 1]
 [1 0 1 0 1 0 1 0]
 [0 1 0 1 0 1 0 1]
 [1 0 1 0 1 0 1 0]
 [0 1 0 1 0 1 0 1]
 [1 0 1 0 1 0 1 0]
 [0 1 0 1 0 1 0 1]
 [1 0 1 0 1 0 1 0]]


20.
>>> print(np.unravel_index(100,(6,7,8)))
(1, 5, 4)

numpy.unravel_index()
一次元に変換したときの位置と行列の次元から、その行列の位置を計算する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.unravel_index.html

21.
>>> Z = np.tile( np.array([[0,1],[1,0]]), (4,4))
>>> print(Z)
[[0 1 0 1 0 1 0 1]
 [1 0 1 0 1 0 1 0]
 [0 1 0 1 0 1 0 1]
 [1 0 1 0 1 0 1 0]
 [0 1 0 1 0 1 0 1]
 [1 0 1 0 1 0 1 0]
 [0 1 0 1 0 1 0 1]
 [1 0 1 0 1 0 1 0]]

numpy.tile()
繰り返しで配列を作る
https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html

22.
>>> Z = np.random.random((5,5))
>>> Zmax, Zmin = Z.max(), Z.min()
>>> Z = (Z - Zmin)/(Zmax - Zmin)
>>> print(Z)
[[0.38973115 0.23771418 0.75333856 0.87096402 0.5808677 ]
 [0.86316942 0.61592379 0.45301403 0.72543609 0.88978301]
 [0.46875535 0.         0.40163897 0.7719748  0.16274914]
 [0.80260931 0.16991524 0.10436984 0.28942723 0.14161046]
 [1.         0.19963566 0.25403345 0.83775085 0.87173854]]

正規化：全ての要素を最大値が1で最小値が0の範囲に変換する

23.
numpy.dtype：データ型
numpy.ubyte：データ型(符号なしバイト)

24.
>>> Z = np.dot(np.ones((5,3)), np.ones((3,2)))
>>> print(Z)
[[3. 3.]
 [3. 3.]
 [3. 3.]
 [3. 3.]
 [3. 3.]]
>>> Z = np.ones((5,3)) @ np.ones((3,2))
>>> print(Z)
[[3. 3.]
 [3. 3.]
 [3. 3.]
 [3. 3.]
 [3. 3.]]

25.
>>> Z = np.arange(11)
>>> Z[(3 < Z) & (Z <= 8)] *= -1
>>> print(Z)
[ 0  1  2  3 -4 -5 -6 -7 -8  9 10]

否定：符号の反転

26.
>>> print(sum(range(5),-1))
9
>>> from numpy import *
>>> print(sum(range(5),-1))
10

27.
>>> Z=np.array([1, 2, 3])
>>> Z**Z
array([ 1,  4, 27], dtype=int32)
>>> 2 << Z >> 2
array([1, 2, 4], dtype=int32)
>>> Z <- Z
array([False, False, False])
>>> 1j*Z
array([0.+1.j, 0.+2.j, 0.+3.j])
>>> Z/1/1
array([1., 2., 3.])
>>> Z<Z>Z
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: The truth value of an array with more than one element is ambiguous.
 Use a.any() or a.all()

28.
>>> print(np.array(0) / np.array(0))
__main__:1: RuntimeWarning: invalid value encountered in true_divide
nan
>>> print(np.array(0) // np.array(0))
__main__:1: RuntimeWarning: divide by zero encountered in floor_divide
0
>>> print(np.array([np.nan]).astype(int).astype(float))
[-2.14748365e+09]

29.
>>> Z = np.random.uniform(-10,+10,10)
>>> print (np.copysign(np.ceil(np.abs(Z)), Z))
[-8. -7. -7.  8.  8.  4.  4.  4. -5.  8.]

np.random.uniform(low, high, size)
low以上high未満の個数sizeの一様乱数
https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.uniform.html

numpy.copysign()
1番目の配列の各要素の符号を、2番目の配列の各要素の符号に変換する
http://pageperso.lif.univ-mrs.fr/~francois.denis/IAAM1/numpy-html-1.14.0/reference/generated/numpy.copysign.html

numpy.ceil()
切り上げ(大きい側の整数に丸める)
https://docs.scipy.org/doc/numpy/reference/generated/numpy.ceil.html

numpy.abs()
絶対値
https://docs.scipy.org/doc/numpy/reference/generated/numpy.absolute.html

30.
>>> Z1 = np.random.randint(0,10,10)
>>> Z2 = np.random.randint(0,10,10)
>>> print(np.intersect1d(Z1,Z2))
[1 3 5 8]

numpy.random.randint(low, high, size)
low以上high未満の個数sizeの整数乱数
https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randint.html

numpy.intersect1d(x, y)
1番目と2番目の引数の配列の共通要素を返す。結果はソートされて返る
https://docs.scipy.org/doc/numpy/reference/generated/numpy.intersect1d.html

32.
>>> np.sqrt(-1) == np.emath.sqrt(-1)
__main__:1: RuntimeWarning: invalid value encountered in sqrt
False

numpy.sqrt()
平方根を求める
https://docs.scipy.org/doc/numpy/reference/generated/numpy.sqrt.html

33.
>>> yesterday = np.datetime64('today', 'D') - np.timedelta64(1, 'D')
>>> print(yesterday)
2018-09-12
>>> today     = np.datetime64('today', 'D')
>>> print(today)
2018-09-13
>>> tomorrow  = np.datetime64('today', 'D') + np.timedelta64(1, 'D')
>>> print(tomorrow)
2018-09-14

numpy.datetime64()
numpy.timedelta64()
https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html

34.
>>> Z = np.arange('2016-07', '2016-08', dtype='datetime64[D]')
>>> print(Z)
['2016-07-01' '2016-07-02' '2016-07-03' '2016-07-04' '2016-07-05'
 '2016-07-06' '2016-07-07' '2016-07-08' '2016-07-09' '2016-07-10'
 '2016-07-11' '2016-07-12' '2016-07-13' '2016-07-14' '2016-07-15'
 '2016-07-16' '2016-07-17' '2016-07-18' '2016-07-19' '2016-07-20'
 '2016-07-21' '2016-07-22' '2016-07-23' '2016-07-24' '2016-07-25'
 '2016-07-26' '2016-07-27' '2016-07-28' '2016-07-29' '2016-07-30'
 '2016-07-31']

35.
>>> A = np.ones(3)*1
>>> B = np.ones(3)*2
>>> C = np.ones(3)*3
>>> np.add(A,B,out=B)
array([3., 3., 3.])
>>> np.divide(A,2,out=A)
array([0.5, 0.5, 0.5])
>>> np.negative(A,out=A)
array([-0.5, -0.5, -0.5])
>>> np.multiply(A,B,out=A)
array([-1.5, -1.5, -1.5])

36.
>>> Z = np.random.uniform(0,10,10)
>>>
>>> print (Z - Z%1)
[9. 9. 9. 2. 0. 8. 1. 4. 9. 4.]
>>> print (np.floor(Z))
[9. 9. 9. 2. 0. 8. 1. 4. 9. 4.]
>>> print (np.ceil(Z)-1)
[9. 9. 9. 2. 0. 8. 1. 4. 9. 4.]
>>> print (Z.astype(int))
[9 9 9 2 0 8 1 4 9 4]
>>> print (np.trunc(Z))
[9. 9. 9. 2. 0. 8. 1. 4. 9. 4.]

numpy.floor
切り捨て
https://docs.scipy.org/doc/numpy/reference/generated/numpy.floor.html

numpy.astype
型変換

numpy.trunc
切り捨て
https://docs.scipy.org/doc/numpy/reference/generated/numpy.trunc.html

37.
>>> Z = np.zeros((5,5))
>>> Z += np.arange(5)
>>> print(Z)
[[0. 1. 2. 3. 4.]
 [0. 1. 2. 3. 4.]
 [0. 1. 2. 3. 4.]
 [0. 1. 2. 3. 4.]
 [0. 1. 2. 3. 4.]]

38.
numpy.fromiter
反復可能なオブジェクトから新しい1次元配列を作成する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromiter.html

39.
>>> generate = (x for x in range(10))
>>> np.fromiter(generate, np.float)
array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])

40.
>>> Z = np.random.random(10)
>>> Z.sort()
>>> print(Z)
[0.04863882 0.35065198 0.39074756 0.40772236 0.53910219 0.58716161
 0.62094915 0.64851612 0.93948351 0.95179935]

numpy.sort()
ソート
https://docs.scipy.org/doc/numpy/reference/generated/numpy.sort.html

41.
>>> Z = np.arange(10)
>>> np.add.reduce(Z)
45

numpy.ufunc.reduce
ufuncによる演算の連続適応
https://docs.scipy.org/doc/numpy/reference/generated/numpy.ufunc.reduce.html

42.
>>> A = np.random.randint(0,2,5)
>>> B = np.random.randint(0,2,5)
>>> print(A)
[0 1 1 0 1]
>>> print(B)
[1 1 0 0 0]

43.
>>> Z = np.zeros(10)
>>> Z.flags.writeable = False
>>> Z[0] = 1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: assignment destination is read-only

44.
>>> Z = np.random.random((10,2))
>>> X,Y = Z[:,0], Z[:,1]
>>> R = np.sqrt(X**2+Y**2)
>>> T = np.arctan2(Y,X)
>>> print(R)
[0.58637727 0.84220221 1.10878143 0.30441797 1.09563465
 0.7891789  0.53341359 0.75708016 1.18675587 0.46456732]
>>> print(T)
[1.51965087 0.82463187 0.99331003 1.50396813 0.76867863
 0.80687136 1.16083179 1.38092249 0.86109474 1.13827143]

numpy.arctan2(a,b)
a/bのarctanを返す。戻り値の範囲は[-pi, pi]
https://docs.scipy.org/doc/numpy/reference/generated/numpy.arctan2.html

45.
>>> Z = np.random.random(10)
>>> print(Z)
[0.9077269  0.04210262 0.02210315 0.80679573 0.78477327
 0.85338837 0.92290303 0.31119686 0.13405941 0.73064869]
>>> Z[Z.argmax()] = 0
>>> print(Z)
[0.9077269  0.04210262 0.02210315 0.80679573 0.78477327
 0.85338837 0.         0.31119686 0.13405941 0.73064869]

numpy.argmax()
多次元配列の中の最大値の要素を持つインデックスを返す
https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html

46.
>>> Z = np.zeros((5,5), [('x',float),('y',float)])
>>> Z['x'], Z['y'] = np.meshgrid(np.linspace(0,1,5),
...                              np.linspace(0,1,5))
>>> print(Z)
[[(0.  , 0.  ) (0.25, 0.  ) (0.5 , 0.  ) (0.75, 0.  ) (1.  , 0.  )]
 [(0.  , 0.25) (0.25, 0.25) (0.5 , 0.25) (0.75, 0.25) (1.  , 0.25)]
 [(0.  , 0.5 ) (0.25, 0.5 ) (0.5 , 0.5 ) (0.75, 0.5 ) (1.  , 0.5 )]
 [(0.  , 0.75) (0.25, 0.75) (0.5 , 0.75) (0.75, 0.75) (1.  , 0.75)]
 [(0.  , 1.  ) (0.25, 1.  ) (0.5 , 1.  ) (0.75, 1.  ) (1.  , 1.  )]]

numpy.meshgrid()
各座標の要素列から格子座標を作成する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.meshgrid.html

numpy.linspace()
線形に等間隔な数列を生成する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html

47.
>>> X = np.arange(8)
>>> Y = X + 0.5
>>> C = 1.0 / np.subtract.outer(X, Y)
>>> print(np.linalg.det(C))
3638.163637117973

numpy.subtract.outer(X, Y)
配列a, b全ての要素の組み合わせに対して、ufunc 関数を適用する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.ufunc.outer.html

numpy.linalg.det()
行列式を求める
https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.det.html

48.
>>> for dtype in [np.int8, np.int32, np.int64]:
...     print(np.iinfo(dtype).min)
...     print(np.iinfo(dtype).max)
...
-128
127
-2147483648
2147483647
-9223372036854775808
9223372036854775807

>>> for dtype in [np.float32, np.float64]:
...     print(np.finfo(dtype).min)
...     print(np.finfo(dtype).max)
...     print(np.finfo(dtype).eps)
...
-3.4028235e+38
3.4028235e+38
1.1920929e-07
-1.7976931348623157e+308
1.7976931348623157e+308
2.220446049250313e-16

numpy.finfo(dtype)
型ごとの有効な値の範囲
https://docs.scipy.org/doc/numpy/reference/generated/numpy.finfo.html

49.
>>> np.set_printoptions(threshold=np.nan)
>>> Z = np.zeros((16,16))
>>> print(Z)
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]

numpy.set_printoptions()
numpy 配列 ndarray を print()で表示する場合の表示形式の各パラメータを設定する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.set_printoptions.html

50.
>>> Z = np.arange(100)
>>> v = np.random.uniform(0,100)
>>> index = (np.abs(Z-v)).argmin()
>>> print(Z[index])
6

numpy.argmin()
最小値を持つ要素のインデックスを取得
https://docs.scipy.org/doc/numpy/reference/generated/numpy.argmin.html

51.
>>> Z = np.zeros(10, [ ('position', [ ('x', float, 1),
...                                   ('y', float, 1)]),
...                    ('color',    [ ('r', float, 1),
...                                   ('g', float, 1),
...                                   ('b', float, 1)])])
>>> print(Z)
[((0., 0.), (0., 0., 0.)) ((0., 0.), (0., 0., 0.))
 ((0., 0.), (0., 0., 0.)) ((0., 0.), (0., 0., 0.))
 ((0., 0.), (0., 0., 0.)) ((0., 0.), (0., 0., 0.))
 ((0., 0.), (0., 0., 0.)) ((0., 0.), (0., 0., 0.))
 ((0., 0.), (0., 0., 0.)) ((0., 0.), (0., 0., 0.))]

52.
>>> Z = np.random.random((10,2))
>>> X,Y = np.atleast_2d(Z[:,0], Z[:,1])
>>> D = np.sqrt( (X-X.T)**2 + (Y-Y.T)**2)
>>> print(D)
[[0.         0.19988998 0.9256404  0.50892899 1.04557276 0.67606483 0.93938026 0.43487942 0.92851335 0.15512779]
 [0.19988998 0.         0.99349044 0.43376271 1.04342507 0.67334517 0.8401159  0.35614795 0.7851519  0.27380385]
 [0.9256404  0.99349044 0.         0.68896993 0.36561947 0.40654187 0.77853559 0.72793521 0.98836232 0.77095502]
 [0.50892899 0.43376271 0.68896993 0.         0.63491703 0.29330559 0.43128521 0.07808331 0.4677979  0.40977   ]
 [1.04557276 1.04342507 0.36561947 0.63491703 0.         0.37245211 0.50946484 0.70292791 0.75062915 0.89771116]
 [0.67606483 0.67334517 0.40654187 0.29330559 0.37245211 0.         0.44411518 0.3478576  0.60987    0.53230964]
 [0.93938026 0.8401159  0.77853559 0.43128521 0.50946484 0.44411518 0.         0.50457894 0.2454073  0.83774892]
 [0.43487942 0.35614795 0.72793521 0.07808331 0.70292791 0.3478576  0.50457894 0.         0.518321   0.34608431]
 [0.92851335 0.7851519  0.98836232 0.4677979  0.75062915 0.60987    0.2454073  0.518321   0.         0.8626901 ]
 [0.15512779 0.27380385 0.77095502 0.40977    0.89771116 0.53230964 0.83774892 0.34608431 0.8626901  0.        ]]

numpy.atleast_2d()
少なくとも２次元の配列として入力を確認する
https://docs.scipy.org/doc/numpy/reference/generated/numpy.atleast_2d.html

>>> import scipy
>>> import scipy.spatial
>>> Z = np.random.random((10,2))
>>> D = scipy.spatial.distance.cdist(Z,Z)
>>> print(D)
[[0.         0.61837963 0.62609044 0.9027217  0.4033726  0.9298792  0.16452761 0.80302115 0.38760785 0.6498044 ]
 [0.61837963 0.         0.59771386 0.3740169  0.23768544 0.43541554 0.63599797 0.26176468 0.28859004 0.51561398]
 [0.62609044 0.59771386 0.         0.96734851 0.61163272 0.54252544 0.76802845 0.85735925 0.66302447 0.10831582]
 [0.9027217  0.3740169  0.96734851 0.         0.50486682 0.65514811 0.86012646 0.11304184 0.51540267 0.87837524]
 [0.4033726  0.23768544 0.61163272 0.50486682 0.         0.64131722 0.39977869 0.40114592 0.06230925 0.5650152 ]
 [0.9298792  0.43541554 0.54252544 0.65514811 0.64131722 0.         1.00254752 0.58060314 0.70163726 0.4353265 ]
 [0.16452761 0.63599797 0.76802845 0.86012646 0.39977869 1.00254752 0.         0.77248475 0.36051466 0.77744411]
 [0.80302115 0.26176468 0.85735925 0.11304184 0.40114592 0.58060314 0.77248475 0.         0.4185529  0.77058741]
 [0.38760785 0.28859004 0.66302447 0.51540267 0.06230925 0.70163726 0.36051466 0.4185529  0.         0.62139564]
 [0.6498044  0.51561398 0.10831582 0.87837524 0.5650152  0.4353265  0.77744411 0.77058741 0.62139564 0.        ]]

scipy.spatial.distance.cdist
二乗距離を求める
https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html

53.
>>> Z = np.arange(10, dtype=np.float32)
>>> Z = Z.astype(np.int32, copy=False)
>>> print(Z)
[0 1 2 3 4 5 6 7 8 9]

numpy.astype()
データ型の変換(キャスト)
https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.astype.html

54.
>>> from io import StringIO
>>> s = StringIO("""1, 2, 3, 4, 5\n
...                 6,  ,  , 7, 8\n
...                  ,  , 9,10,11\n""")
>>> Z = np.genfromtxt(s, delimiter=",", dtype=np.int)
>>> print(Z)
[[ 1  2  3  4  5]
 [ 6 -1 -1  7  8]
 [-1 -1  9 10 11]]

numpy.genfromtxt()
CSVファイルの読み込み
※loadtxtメソッドでも読み込めるが、genfromtxtの方が欠損値を埋める機能などがあり高機能
https://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html

55.
>>> Z = np.arange(9).reshape(3,3)
>>> for index, value in np.ndenumerate(Z):
...     print(index, value)
...
(0, 0) 0
(0, 1) 1
(0, 2) 2
(1, 0) 3
(1, 1) 4
(1, 2) 5
(2, 0) 6
(2, 1) 7
(2, 2) 8
>>> for index in np.ndindex(Z.shape):
...     print(index, Z[index])
...
(0, 0) 0
(0, 1) 1
(0, 2) 2
(1, 0) 3
(1, 1) 4
(1, 2) 5
(2, 0) 6
(2, 1) 7
(2, 2) 8

numpy.ndenumerate()
多次元配列の走査
https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndenumerate.html

56.
>>> X, Y = np.meshgrid(np.linspace(-1,1,10), np.linspace(-1,1,10))
>>> D = np.sqrt(X*X+Y*Y)
>>> sigma, mu = 1.0, 0.0
>>> G = np.exp(-( (D-mu)**2 / ( 2.0 * sigma**2 ) ) )
>>> print(G)
[[0.36787944 0.44822088 0.51979489 0.57375342 0.60279818 0.60279818 0.57375342 0.51979489 0.44822088 0.36787944]
 [0.44822088 0.54610814 0.63331324 0.69905581 0.73444367 0.73444367 0.69905581 0.63331324 0.54610814 0.44822088]
 [0.51979489 0.63331324 0.73444367 0.81068432 0.85172308 0.85172308 0.81068432 0.73444367 0.63331324 0.51979489]
 [0.57375342 0.69905581 0.81068432 0.89483932 0.9401382  0.9401382  0.89483932 0.81068432 0.69905581 0.57375342]
 [0.60279818 0.73444367 0.85172308 0.9401382  0.98773022 0.98773022 0.9401382  0.85172308 0.73444367 0.60279818]
 [0.60279818 0.73444367 0.85172308 0.9401382  0.98773022 0.98773022 0.9401382  0.85172308 0.73444367 0.60279818]
 [0.57375342 0.69905581 0.81068432 0.89483932 0.9401382  0.9401382  0.89483932 0.81068432 0.69905581 0.57375342]
 [0.51979489 0.63331324 0.73444367 0.81068432 0.85172308 0.85172308 0.81068432 0.73444367 0.63331324 0.51979489]
 [0.44822088 0.54610814 0.63331324 0.69905581 0.73444367 0.73444367 0.69905581 0.63331324 0.54610814 0.44822088]
 [0.36787944 0.44822088 0.51979489 0.57375342 0.60279818 0.60279818 0.57375342 0.51979489 0.44822088 0.36787944]]

57.
>>> n = 10
>>> p = 3
>>> Z = np.zeros((n,n))
>>> np.put(Z, np.random.choice(range(n*n), p, replace=False),1)
>>> print(Z)
[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]

numpy.put()
値を入れる
https://docs.scipy.org/doc/numpy/reference/generated/numpy.put.html

58.
>>> X = np.random.rand(5, 10)
>>> Y = X - X.mean(axis=1, keepdims=True)
>>> print(Y)
[[ 0.07088699 -0.29151163  0.05527583  0.07692649  0.13942575  0.06178154  0.05891034  0.02790691 -0.09616321 -0.10343902]
 [-0.30295122  0.12243005 -0.12129895 -0.15710369 -0.11160222 -0.30324314  0.01702903 -0.31011821  0.54965868  0.61719966]
 [-0.25446538  0.20985562 -0.23188573 -0.11140454 -0.13163618  0.4583772  -0.07977195  0.24174099 -0.05690394 -0.04390608]
 [-0.22664338  0.45224296 -0.33507169 -0.17604468 -0.41532907  0.27554394  0.25093461  0.35203624  0.05018574 -0.22785468]
 [ 0.46125297 -0.02696172 -0.30461008  0.0995479  -0.15992661 -0.34923851 -0.17289837  0.35042241  0.14101013 -0.03859812]]
>>> Y = X - X.mean(axis=1).reshape(-1, 1)
>>> print(Y)
[[ 0.07088699 -0.29151163  0.05527583  0.07692649  0.13942575  0.06178154  0.05891034  0.02790691 -0.09616321 -0.10343902]
 [-0.30295122  0.12243005 -0.12129895 -0.15710369 -0.11160222 -0.30324314  0.01702903 -0.31011821  0.54965868  0.61719966]
 [-0.25446538  0.20985562 -0.23188573 -0.11140454 -0.13163618  0.4583772  -0.07977195  0.24174099 -0.05690394 -0.04390608]
 [-0.22664338  0.45224296 -0.33507169 -0.17604468 -0.41532907  0.27554394  0.25093461  0.35203624  0.05018574 -0.22785468]
 [ 0.46125297 -0.02696172 -0.30461008  0.0995479  -0.15992661 -0.34923851 -0.17289837  0.35042241  0.14101013 -0.03859812]]

59.
>>> Z = np.random.randint(0,10,(3,3))
>>> print(Z)
[[5 9 0]
 [9 9 4]
 [3 5 2]]
>>> print(Z[Z[:,1].argsort()])
[[3 5 2]
 [5 9 0]
 [9 9 4]]

numpy.argsort()
ソート結果の配列のインデックスを返す
https://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html

60.
>>> Z = np.random.randint(0,3,(3,10))
>>> print((~Z.any(axis=0)).any())
False

numpy.any()
対象となる範囲に１つでもTrueがあればTrueを返す
https://docs.scipy.org/doc/numpy/reference/generated/numpy.any.html
